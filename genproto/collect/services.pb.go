// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: collect/services.proto

package collect

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("collect/services.proto", fileDescriptor_dd07a8319df1a5ea) }

var fileDescriptor_dd07a8319df1a5ea = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0xce, 0xcf, 0xc9,
	0x49, 0x4d, 0x2e, 0xd1, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x87, 0x8a, 0x4b, 0x89, 0xc2, 0x14, 0x40, 0x69, 0x88, 0xbc, 0xd1, 0x22,
	0x46, 0x2e, 0x4e, 0xf7, 0xfc, 0x60, 0x88, 0x26, 0x21, 0x6f, 0x2e, 0x1e, 0x67, 0x88, 0x74, 0x40,
	0x7e, 0x71, 0x49, 0xb1, 0x90, 0x8c, 0x1e, 0x4c, 0x35, 0xb2, 0x70, 0x50, 0x6a, 0x61, 0x69, 0x6a,
	0x71, 0x89, 0x94, 0x2c, 0x0e, 0xd9, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x0f, 0x2e, 0x6e,
	0xe7, 0x8c, 0xd4, 0xe4, 0xec, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x21, 0x69, 0x84, 0x6a, 0x84,
	0x28, 0xcc, 0x28, 0x19, 0xec, 0x92, 0x10, 0x93, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xae, 0x37,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x33, 0xe3, 0x18, 0xf7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoServiceClient is the client API for GoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoServiceClient interface {
	CollectPosts(ctx context.Context, in *CollectPostsRequest, opts ...grpc.CallOption) (*CollectPostsResponse, error)
	CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type goServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoServiceClient(cc *grpc.ClientConn) GoServiceClient {
	return &goServiceClient{cc}
}

func (c *goServiceClient) CollectPosts(ctx context.Context, in *CollectPostsRequest, opts ...grpc.CallOption) (*CollectPostsResponse, error) {
	out := new(CollectPostsResponse)
	err := c.cc.Invoke(ctx, "/collect.GoService/CollectPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goServiceClient) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/collect.GoService/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoServiceServer is the server API for GoService service.
type GoServiceServer interface {
	CollectPosts(context.Context, *CollectPostsRequest) (*CollectPostsResponse, error)
	CheckStatus(context.Context, *CheckStatusRequest) (*CheckStatusResponse, error)
}

// UnimplementedGoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGoServiceServer struct {
}

func (*UnimplementedGoServiceServer) CollectPosts(ctx context.Context, req *CollectPostsRequest) (*CollectPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPosts not implemented")
}
func (*UnimplementedGoServiceServer) CheckStatus(ctx context.Context, req *CheckStatusRequest) (*CheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}

func RegisterGoServiceServer(s *grpc.Server, srv GoServiceServer) {
	s.RegisterService(&_GoService_serviceDesc, srv)
}

func _GoService_CollectPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoServiceServer).CollectPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.GoService/CollectPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoServiceServer).CollectPosts(ctx, req.(*CollectPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collect.GoService/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoServiceServer).CheckStatus(ctx, req.(*CheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collect.GoService",
	HandlerType: (*GoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectPosts",
			Handler:    _GoService_CollectPosts_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _GoService_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect/services.proto",
}
